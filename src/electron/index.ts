// Copyright (c) 2022 Sri Lakshmi Kanthan P
// 
// This software is released under the MIT License.
// https://opensource.org/licenses/MIT

import { app, globalShortcut, Menu, MenuItem, ipcMain, clipboard } from 'electron';

import Facsimile from './components/Facsimile';
import Pair from './interface/pair';
import path from 'path';

import * as C from './constants/constants';
import * as I from "./constants/ipcevents";
import * as store from "./storage/store";

// This allows TypeScript to pick up the magic constant that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code 
// (depending on whether you're running in development or production).

// Main Window Preload Entry
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Main Window Load entry
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;

// get the lock to chen single instance
if (!app.requestSingleInstanceLock()) {
  app.quit();
}

//  stop your app launching at install
if (require('electron-squirrel-startup')) {
  app.quit();
}

// Add app to system startup
app.setLoginItemSettings({
  openAtLogin: app.isPackaged,
  openAsHidden: true,
  path: app.getPath("exe")
});


// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.

app.whenReady().then(() => {  
  // create the main window of the application
  const facsimile = new Facsimile({
    icon: path.resolve(__dirname, "../../assets/images/icon.ico"),
    alwaysOnTop: true,
    height: C.APP_WINDOW_HEIGHT,
    width: C.APP_WINDOW_WIDTH,
    frame: false,
    show: false,
    skipTaskbar: true,
    resizable: false,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
      devTools: !app.isPackaged,
    }
  });

  // load the main window
  facsimile.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // register key to toggle main window visibility
  globalShortcut.register(C.APP_SHORTCUT_KEY, () => {
    if (facsimile.isVisible()) {
      facsimile.hide();
    } else {
      facsimile.show();
    }
  });

  // Create Non visible Menu 
  const menu = new Menu();

  // Add ESC to close the app
  menu.append(new MenuItem({
    label: 'Hide Facsimile',
    visible: false,
    accelerator: 'Esc',
    click: () => {
      facsimile.hide();
    }
  }));

  // Add for dev tools
  menu.append(new MenuItem({
    accelerator: "Control+D",
    label: "Open Dev Tools",
    visible: false,
    click: () => {
      facsimile.webContents.openDevTools();
    }
  }));

  // Add for Quit
  menu.append(new MenuItem({
    accelerator: "Control+Q",
    label: "Quit",
    visible: false,
    click: () => {
      app.quit();
    }
  }));

  // set the menu
  Menu.setApplicationMenu(menu);

  // get the key value
  ipcMain.handle(I.GET_KEY_VALUE, (event, key: string) => {
    return store.getKeyValue(key); // two way
  });

  // set the Key Value
  ipcMain.on(I.SET_KEY_VALUE, (event, pair: Pair<string, string>) => {
    store.setKeyValue(pair); // one way render -> main
  });

  // delete a key
  ipcMain.on(I.DEL_KEY_VALUE, (event, key: string) => {
    store.deleteKey(key); // one way render -> main
  })

  // get the all values
  ipcMain.handle(I.ALL_KEY_VALUE, () => {
    return store.getAllKeyValues(); // two way
  });

  // Hide the Electron Window
  ipcMain.on(I.HIDE_ELECTRON, () => {
    facsimile.isVisible() && facsimile.hide();
  });

  // copy the key value to clipboard
  ipcMain.on(I.CPY_KEY_VALUE, async (event, key: string) => {
    clipboard.writeText(await store.getKeyValue(key));
  });
});
